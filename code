//define region of interest (roi), by importing file or digitizing area to be analayzed
//script below was used for a classification on region around Inuya river, Peru
var inuyaRoi = ee.FeatureCollection(table);

////BEGIN CLASSIFICATION////

//SENTINEL-1 SAR IMAGERY AQUISITION//
// Filter the collection for the VV polarized product from the descending track
var collectionVV = ee.ImageCollection('COPERNICUS/S1_GRD')
    .filter(ee.Filter.eq('instrumentMode', 'IW'))
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
    .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))
    .filterBounds(inuyaRoi)
    .select(['VV']);
//print(collectionVV);

// Filter the collection for the VH polarized product from the descending track
var collectionVH = ee.ImageCollection('COPERNICUS/S1_GRD')
    .filter(ee.Filter.eq('instrumentMode', 'IW'))
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
    .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))
    .filterBounds(inuyaRoi)
    .select(['VH']);
//print(collectionVH);


//filter by desired date and add to map as layers, centered on the roi
var SARVV = collectionVV.filterDate('2020-10-01','2020-10-16').mosaic();
var SARVH = collectionVH.filterDate('2020-10-01','2020-10-16').mosaic();

//Map.centerObject(inuyaRoi,10);
Map.addLayer(SARVV, {min:-15, max:0}, 'SAR VV Mean DESC', true);
Map.addLayer(SARVH, {min:-25, max:0}, 'SAR VH Mean DESC', true);


////Mask, then add Landsat 8 Surface Reflectance data////
//This will be used as reference imagery ("ground truthing") for the supervised classification
//and may also be incorporated into a combined Landsat/SAR classification beyond what will be done in the following script

//Function to cloud mask using pixel QA band of Landsat 8 SR
function maskL8sr(image) {
//Bits 3 and 5 are cloud and shadow, respectively
  var cloudShadowBitMask = 1 << 3;
  var cloudsBitMask = 1 << 5;
//Get pixel QA band
  var qa = image.select('pixel_qa');
//Both flags should be set to zero, indicating clear conditions
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
.and(qa.bitwiseAnd(cloudsBitMask).eq(0));
//Return the masked image, scaled to reflectance, without the QA bands
  return image.updateMask(mask).divide(10000)
  .select("B[0-9]*")
  .copyProperties(image, ["system:time_start"]);
}

//Pull images from Landsat8 SR collection for the same time period
var collectionL8Jan = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
    .filterDate('2020-10-01','2020-10-16')
    .filterBounds(inuyaRoi)
    .map(maskL8sr);
print(collectionL8Jan, 'Landsat Early Oct');
    
//Calculate NDVI and create a composite containing all L8 bands and NDVI
var comp = collectionL8Jan.mean();
var ndvi = comp.normalizedDifference(['B5','B4']).rename('NDVI');
var L8composite = ee.Image.cat(comp, ndvi);

//Add layer to map
Map.addLayer(L8composite, {bands: ['B4','B3', 'B2'], min:0, max:0.2}, 'Optical');

//Apply speckle filter to SAR imagery to reduce noise and improve classification accuracy
var SMOOTHING_RADIUS = 50;
var SARVV_filtered = SARVV.focal_mean(SMOOTHING_RADIUS, 'circle', 'meters');
var SARVH_filtered = SARVH.focal_mean(SMOOTHING_RADIUS, 'circle', 'meters');

//Display SAR filtered images
Map.addLayer(SARVV_filtered, {min:-15, max:0}, 'SARVV speckle filter',1);
Map.addLayer(SARVH_filtered, {min:-25, max:0}, 'SARVH speckle filter',1);


////SELECT TRAINING DATA////
//Chose classifcation classes. Ex: open_water, deforested1, intact_forest

//Merge Feature Collections
var newfc = open_water.merge(deforested1).merge(intact_forest);

//Define the SAR bands to train data
var final = ee.Image.cat(SARVV_filtered, SARVH_filtered);
var bands = ['VH','VV'];
var training = final.select(bands).sampleRegions({
  collection: newfc,
  properties: ['landcover'],
  scale: 30});

////Train Smile Random Forest Classifier////
//change numeric value in smileRandomForest() algorithm to change the number of decision trees generated
var classifier = ee.Classifier.smileRandomForest(50).train({
    features: training,
    classProperty: 'landcover',
    inputProperties: bands
});

////Run the Classification////
var classified = final.select(bands).classify(classifier);

//Display Classification
//change palette strings and min/max values according to the number of classes in classificiation
Map.addLayer(classified,
  {min:1, max: 3, palette: ['00d7e1', 'dfc71e', '10b041']},
  'SAR Classification');
  
////Create set of test polygons to validate classification and input test polygons in a smileRandomForest classifier////
//Test polygons should be different than training polygons for accurate confusion matrix
//populate blank fields with relevant values//
//var classifier_test = ee.Classifier.smileRandomForest().train({
//features: ''
//classProperty: ''
//  inputProperties: bands,
//})

//Create a confusion matrix representing resubstitution accuracy of classification
//print('SRF-SAR error matrix:', classifier_test.confusionMatrix());
//print('SRF-SAR accuracy:', classifier_test.confusionMatrix().accuracy());

//Map roi over other layers, if desired
Map.addLayer(inuyaRoi, {palette:['dfdfdf']},'Inuya Roi');
